                    Word-Count: An Exercise of C Programming
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                        Stefan Vargyas, stvar@yahoo.com

                                  Dec 16, 2021


Table of Contents
-----------------

0. Copyright & Licensing
1. The Word-Count Program
2. Building and Testing Word-Count
3. The Implementation of Word-Count
4. GCC's Integer Arithmetic Overflow Builtins
5. References


0. Copyright & Licensing
========================

This program is GPL-licensed free software. Its author is Stefan Vargyas. You
can redistribute it and/or modify it under the terms of the GNU General Public
License as published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

You should have received a copy of the GNU General Public License along with
this program (look up for the file COPYING in the top directory of the source
tree). If not, see http://gnu.org/licenses/gpl.html.


1. The Word-Count Program
=========================

The Word-Count program's vocation is that of a dictionary-based word counter. It
consists of one binary program -- 'word-count' -- that is to be used by simple
command lines as shown by 'word-count's own help info:

  $ ./word-count --help
  usage: word-count [OPTION]... DICT [TEXT]...
  where the options are:
    -b|--io-buf-size=SIZE    the initial size of the memory buffers allocated
                               for buffered I/O; SIZE is of form [0-9]+[KM]?,
                               the default being 4K; the attached env var is
                               $WORD_COUNT_IO_BUF_SIZE
    -h|--hash-tbl-size=SIZE  the initial number of hash table entries used;
                               the default size is 1024; attached env var:
                               $WORD_COUNT_HASH_TBL_SIZE
    -m|--use-mmap-io=SPEC    use memory-mapped I/O instead of buffered I/O
                               as specified: either one of 'dict', 'text',
                               'none' or 'all'; the default is 'none'; '-'
                               is a shortcut for 'none' and '+' for 'all';
                               attached env var: $WORD_COUNT_USE_MMAP_IO
       --[print-]config      print all config and debug parameters and exit
       --version             print version numbers and exit
    -?|--help                display this help info and exit

DICT is Word-Count's input dictionary: a given named file containing words (i.e.
sequence of non-whitespace characters), each placed on a separate line of text.
Empty lines and lines that begin with '#' are ignored.

TEXT is a (possibly empty) sequence of names of text files that Word-Count will
process, producing on its standard output a sequence of lines of text as shown:

  NUM TAB WORD LF
  ...
  NUM TAB total LF

where each line of the first kind accounts for the number NUM of occurrences of
the dictionary word WORD in the input given. The output line of the second kind
(that will always appear on the last output line of Word-Count) accounts for the
total number of words Word-Count has seen on its input.

When no input text file is given, Word-Count takes its input from the standard
input stream.

Note that, in the current implementation, Word-Count's notion of input word is
defined to be any non-empty sequence of non-whitespace characters, considered
(conceptually) in the "C" locale. Thus Word-Count does not take into account
the current locale settings of the environment from within which it's invoked.

Here is an example of invoking 'word-count' on its own C source code file:

  $ norm() { cat "$@"|tr -s '[:punct:]' ' '; }

  $ norm word-count.c|./word-count /usr/share/dict/words|sort -k 1n,1
  ...
  25    file
  31    mem
  45    dict
  45    node
  53    char
  78    hash
  94    size
  2212  total


2. Building and Testing Word-Count
==================================

The Word-Count program is written in modern C (that is C11) and was developed
under a GNU/Linux environment using GCC C compiler 10.2.1, GNU make 4.2.1 and
a few common GNU/Linux power-tools.

Worth of notice is that the program was tested also with GCC 7.4.0, 8.2.1 and
9.3.1. Each of these compilers built cleanly Word-Count and each 'word-count'
binary obtained passed successfully Word-Count's test suite.

Also worth of notice is that building Word-Count with GCC's ASAN and UBSAN
instrumentation enabled (the GCC's command line options `-fsanitize=address'
and, respectively, `-fsanitize=undefined') produces 'word-count' binaries that
each pass successfully the test suite. Word-Count passes its tests when issued
under Valgrind too.

Important to note: 'word-count' depends on it being build with GCC: it uses
a few notable extensions to the C language and to the C standard library GCC
is providing. Two examples: the ubiquitous usage of the built-in function
'__builtin_types_compatible_p' within a wide range of preprocessor macros
and the extensively used C extension of the so called 'compound statement
enclosed in parentheses' expressions (also for the construction of a wide
array of useful C macros).

For building 'word-count', one has to issue a 'make' command of the following
kind, from within the top directory of the source tree:

  $ make [ARG]...

where each 'ARG' is of one of the following form:

  ------------------------  -------------------------
       'make' argument            'gcc' argument
  ------------------------  -------------------------
    CONFIG+=$NAME             -DCONFIG_$NAME
    CONFIG+=$NAME=$VALUE      -DCONFIG_$NAME=$VALUE
    SANITIZE=$SANITIZE        -fsanitize=$SANITIZE
    OPT=$OPT                  -O$OPT and a few more
  ------------------------  -------------------------

Above, in the case of 'CONFIG' arguments, '$NAME' is the name of the respective
configuration parameter, stripped off the common prefix 'CONFIG_'; '$VALUE' is
the value assigned to the respective parameter (if it has such assignable value).

Currently, the configuration parameters of Word-Count are as shown:

  * 'CONFIG_USE_48BIT_PTR'
    The hash table employed by Word-Count makes use of a well-known feature of
    the x86-64 processor architecture: that is the ability to pack 16-bit user
    information into 64-bit pointers [6]. This saves memory when the structure
    becomes huge. Word-Count defined this build-time configuration parameter --
    'CONFIG_USE_48BIT_PTR' -- for to bring into a given 'word-count' binary the
    code that is packing into pointers to dictionary words the length of those
    words.

    As a consequence, any binary 'word-count' built with 'CONFIG_USE_48BIT_PTR'
    has a hard-coded limitation on the length of the dictionary words that it
    accepts: those words must be of length less than 65536 (since the lengths
    are stored as unsigned integers of 16-bit width).

  * 'CONFIG_USE_OVERFLOW_BUILTINS'
    Word-Count is developed with a keen attention to the way its low level C
    operations are implemented. Consequently, each of its integer arithmetic
    operation is guarded against overflow by code written explicitly for this
    purpose.

    The parameter 'CONFIG_USE_OVERFLOW_BUILTINS' makes that particular overflow
    checking code to use the GCC's builtin functions '__builtin_add_overflow_p',
    '__builtin_sub_overflow_p', '__builtin_mul_overflow_p' [7].

    A very nice feature of GCC is that the C code like the one below:

      size_t f(size_t x, size_t y)
      {
          ASSERT(!__builtin_add_overflow_p(x, y, (size_t) 0));
          return x + y;
      }

    is optimized such that the integer addition operation is done only once:

          .cfi_startproc
          movq    %rdi, %rax
          addq    %rsi, %rax
          jc      .error
          ret
      .error:
          ...
          call    assert_failed
          .cfi_endproc

     GCC does the very same kind of code generation optimization for subtraction
     and multiplication operations too. (See the section 4 below for details.)

  * 'CONFIG_USE_IO_BUF_LINEAR_GROWTH'
    For to reduce the number of memory allocation library calls (specifically
    the number of calls to C library function 'realloc') Word-Count makes when
    needing to extend dynamically the size of its I/O buffer, the program uses
    the well-known technique of exponentially growing that buffer (that is that
    each time when it needs to extend the space of the I/O buffer, the program
    calls 'realloc' for to get a new buffer twice as big as the existing one).

    This configuration parameter replaces that logic of I/O buffer growth with
    one that grows the I/O buffer sizes linearly, with the increments given by
    'word-count's command line options `-b|--io-buf-size'. The linear growing
    scheme is inefficient, yet is of use when it comes to test the program's
    I/O buffering algorithm, by having the I/O buffer growing at a constant
    very small rate.

  * 'CONFIG_USE_HASH_ALGO={FNV1,FNV1A,MURMUR2,MURMUR3}'
    The hash table employed by Word-Count can be made through this configuration
    parameter to use the named hashing algorithm. The FNV [8] and MurmurHash [9]
    family of algorithms are well-known high-quality non-cryptographic string
    hashing algorithms.

  * 'CONFIG_COLLECT_STATISTICS'
    The purpose of this config parameter is that of bringing into a 'word-count'
    binary statistics collecting code. This code records and prints out various
    run-time parameters that are relevant to the internal functioning of a given
    configuration of Word-Count.

    For printing out statistics data, 'word-count' augments its basic command
    line options with command line action options:

      $ ./word-count --help
      usage: word-count [ACTION|OPTION]... DICT [TEXT]...
      where the actions are:
        -L|--load-dict           only load dictionary and print out collected
                                   statistics data
        -C|--count-words         count input words and print out counter/word
                                   pairs (default)
        -S|--collect-stats       count input words, but print out only collected
                                   statistics data
      and the options are:
      ...
           --[print-]stat-names  print the names of the statistics parameters
                                   that otherwise would have been printed out
                                   by the program when invoked with a command
                                   line that differs from the current one by
                                   only excluding these options and then exit
      ...

    The basic function of 'word-count' is available under the action options
    `-C|--count-words', while the new function of collecting and printing out
    statistics data is available under the action options `-L|--load-dict' and
    `-S|--collect-stats'.

  * 'CONFIG_MEMOIZE_KEY_HASHES'
    This configuration parameter makes the hash table of Word-Count to memoize
    within the table itself the hash sums it computed for its keys. When the
    hash table does this memoizing, its rehashing operation works faster, but
    the table itself will consume more memory.

The 'make' parameter 'SANITIZE=$SANITIZE' makes GCC receiving the argument
`-fsanitize=$SANITIZE', where '$SANITIZE' can be 'address' or 'undefined'.

The 'make' parameter 'OPT=$OPT' makes GCC to get the argument `-O$OPT', when
'$OPT' is '[0-3]'. When the command line invoking 'make' does not contain an
argument of form `OPT=$OPT', GCC receives the arguments `-DDEGUG -g' instead.

When '$OPT' is 'PERF', GCC gets the arguments `-O3 -fno-omit-frame-pointer'.
The second argument makes the 'perf' program [10] applicable to 'word-count',
such that 'perf' generate profiling data for given instances of 'word-count'
executed under it. Upon running 'word-count' under 'perf', the profiling data
obtained can be read and analyzed by the means 'perf' itself offers.

When '$OPT' is 'PROF', by receiving the arguments `-O3 -pg', GCC is asked to
build a binary 'word-count' that has profiling instrumentation enabled. Such
an instrumented 'word-count' will generate upon each execution profiling data
that can be read and analyzed with the help of 'gprof' program (which is part
of GNU Binutils package [11]).

Upon running 'make', expect to get neither warnings nor errors out of it. If
everything went OK, 'make' is supposed to have produced the binary 'word-count'.

Word-Count comes along with a test suite -- 'test.def' -- and a 'bash' test
script -- 'test.sh' -- that exercises the test suite on each and every valid
combination of built-time and run-time parameters of 'word-count'.

Note that the scripts 'test.{def,sh}' depend on a few GNU/Linux power-tools
(such as 'bash', 'cut', 'diff', 'sed', 'sort', 'tr', 'uniq') that are found
on every GNU/Linux installation.

The script 'test.sh' is quite involved, but very easy to be used, as indicated
by the help info it provides:

  $ ./test.sh --help
  usage: ./test.sh [ACTION|OPTION]... [ARG]...
  where the actions are:
    -A|--all-build-run     build 'word-count' and run all tests on it
                             for each valid combination of the script's
                             command line options `-g|--valgrind' and
                             `-m|--use-mmap-io={-,+,dict|text}', along
                             with the following 'Makefile' parameters:
                               * no 'CONFIG', 'CONFIG+=USE_48BIT_PTR',
                                 or 'CONFIG+=USE_OVERFLOW_BUILTINS',
                                 or 'CONFIG+=USE_IO_BUF_LINEAR_GROWTH'
                                 or 'CONFIG+=MEMOIZE_KEY_HASHES';
                               * no 'SANITIZE', 'SANITIZE=address',
                                 or 'SANITIZE=undefined';
                               * no 'OPT' or 'OPT=3'
    -B|--build-run         build 'word-count' and run all tests on it
    -C|--commands          don't run the generated test commands, but
                             only print them out
    -R|--run               run all generated test commands on existing
                             'word-count' binary (default)
  and the options are:
    -c|--no-color          do not colorize output
    -d|--dry-run           when the script's action is `-B|--build-run'
                             or `-A|--all-build-run', do not run any
                             test, only build the 'word-count' binaries
    -e|--echo              echo the command line invoking the script
    -g|--valgrind          execute each 'word-count' instance under
                             'valgrind'
    -b|--io-buf-size=SIZE  execute each 'word-count' instance with an
                             environment variable $WORD_COUNT_IO_BUF_SIZE
                             set to SIZE; it can be of form [0-9]+[KM]?;
                             the default is 1
    -m|--use-mmap-io=SPEC  execute each 'word-count' instance with an
                             environment variable $WORD_COUNT_USE_MMAP_IO
                             set to SPEC; it can be either 'dict', 'text',
                             'none' or 'all'; '-' is a shortcut for 'none'
                             and '+' for 'all'
    -v|--verbose           be verbose
    -?|--help              display this help info and exit

When having built a particular 'word-count' binary (that meaning that one have
issued 'make' with a particular combination of configuration parameters), for
to run the test-suite on that particular binary, one should issue simply:

  $ ./test.sh && echo OK
  OK

or, else, for verbose output:

  $ ./test.sh -v
  test #0: OK
  test #1: OK
  ...
  test lorem-ipsum: OK
  test lorem-ipsum2: OK
  test lorem-ipsum3: OK

The expected behavior is that of all test cases succeed. In the case of things
going the wrong way for a particular test case, the script will produce a diff
between expected and actual output of 'word-count'.

For testing Word-Count more thoroughly, the following simple command line should
be issued:

  $ ./test.sh -A

This command produces a series of lines of text as shown:

  $ ./test.sh -B
  ...
  $ ./test.sh -B OPT=3
  ...
  $ ./test.sh -B SANITIZE=address
  ...
  $ ./test.sh -B SANITIZE=address OPT=3
  ...
  $ ./test.sh -B SANITIZE=undefined
  ...
  $ ./test.sh -B SANITIZE=undefined OPT=3
  ...
  $ ./test.sh -B CONFIG+=USE_48BIT_PTR
  ...
  $ ./test.sh -B CONFIG+=USE_48BIT_PTR OPT=3
  ...
  $ ./test.sh -B CONFIG+=USE_48BIT_PTR SANITIZE=address
  ...
  $ ./test.sh -B CONFIG+=USE_48BIT_PTR SANITIZE=address OPT=3
  ...
  $ ./test.sh -B CONFIG+=USE_48BIT_PTR SANITIZE=undefined
  ...
  $ ./test.sh -B CONFIG+=USE_48BIT_PTR SANITIZE=undefined OPT=3
  ...
  $ ./test.sh -B CONFIG+=USE_OVERFLOW_BUILTINS
  ...
  $ ./test.sh -B CONFIG+=USE_OVERFLOW_BUILTINS OPT=3
  ...
  $ ./test.sh -B CONFIG+=USE_OVERFLOW_BUILTINS SANITIZE=address
  ...
  $ ./test.sh -B CONFIG+=USE_OVERFLOW_BUILTINS SANITIZE=address OPT=3
  ...
  $ ./test.sh -B CONFIG+=USE_OVERFLOW_BUILTINS SANITIZE=undefined
  ...
  $ ./test.sh -B CONFIG+=USE_OVERFLOW_BUILTINS SANITIZE=undefined OPT=3
  ...

The ellipsis marks seen above indicate the deletion of certain text lines for
sake of brevity. The lines deleted were of form '$ ./test -R ...', i.e. inner
instances of `./test.sh -R', issued with all combinations of valid run-time
parameters by a corresponding outer command `./test.sh -B':

  $ ./test.sh -R -m-
  $ ./test.sh -R -m+
  $ ./test.sh -R -m dict
  $ ./test.sh -R -m text
  $ ./test.sh -R -g -m-
  $ ./test.sh -R -g -m+
  $ ./test.sh -R -g -m dict
  $ ./test.sh -R -g -m text

Yet more of an use case of 'test.sh' is the following: run 'test.sh' on a given
GCC or, in series, on several different GCCs:

  $ ./test.sh -A GCC=gcc-7

  $ for g in {7..10}; do ./test.sh -A GCC=gcc-$g; done


3. The Implementation of Word-Count
===================================

As already known from the descriptions in the sections above, Word-Count is
comprised of a single C source file, 'word-count.c'.

For to achieve its main function, 'word-count.c' makes use of an associative
array [4] in the incarnation of open-addressing linear-probing hash table [1].

I have chosen this data structure -- that is associating to each dictionary
word its correspondent input occurrence counter -- for several reasons:

  (a) As seen in Knuth [1], this hash table is very simple, with respect to
      both its representation and associated algorithms;

  (b) This kind of hash table leads to implementations that are fast, efficient
      and cache-friendly (Google itself was advertising the usage of this data
      structure on CppCon 2017 and CppCon 2019 [5]);

  (c) I myself have employed it in quite a lot of my projects (some of which are
      public: Path-Set [2], Json-Type [3]).

From the outer level to the inner ones of the code in 'word-count.c', the design
of Word-Count is as follows:

  struct options_t
  ----------------
  Class responsible for parsing the command line options of 'word-count' (also
  taking in all the corresponding environment variables, if any were given).

  struct dict_t
  -------------
  The main class of Word-Count. It implements the dictionary-based word counter
  function of Word-Count. The 'dict_t' class is built off one instance of class
  'lhash_t' and one instance of class 'mem_mgr_t'.

  It's worth noting that the class 'lhash_t' does not own the dictionary words
  it holds references of. The dictionary words are owned by the 'dict_t' class.
  The 'dict_t' class is delegating the management of its words to the instance
  of 'mem_mgr_t' class.

  struct file_io_t
  ----------------
  This is a class that's responsible for the I/O operations the program employs.
  It wraps around the *conceptually* defined abstract class of which interface
  is as follows:

    * void (*done)(void* this):
      virtual destructor;

    * bool (*get_line)(void* this, const char** ptr, size_t* len):
      virtual method that provides line-oriented I/O functionality.

  There are two concrete classes that implement the interface above: the class
  'file_map_t' and the class 'file_buf_t'.

  struct file_map_t
  -----------------
  A class incarnating the 'file_io_t' interface that implements its operations
  in a memory-mapped I/O fashion.

  struct file_buf_t
  -----------------
  A class incarnating the 'file_io_t' interface that implements its operations
  in a buffered I/O fashion.

  struct lhash_t
  --------------
  The class implementing Word-Count's hash table, associating integer counters
  to dictionary words.

  struct lhash_node_t
  -------------------
  POD structure that belong to the class 'lhash_t'.

  struct mem_mgr_t
  ----------------
  This is a class that's responsible for memory management of dictionary words
  stored in memory during a running instance of Word-Count. It wraps around the
  *conceptually* defined abstract class of which interface is:

    * void (*done)(void* this): virtual destructor.

  There are two concrete classes that implements the interface above: the class
  'mem_map_t' and the class 'mem_buf_t'.

  struct mem_map_t
  ----------------
  A class incarnating the 'mem_mgr_t' interface that *manages* a set of regions
  of memory that are file memory-mappings obtained through the library function
  'mmap'. The lifetime of each managed memory region extends precisely until
  that of 'mem_map_t's instance itself. At the end of lifetime of an instance
  of 'mem_map_t' all memory regions that the instance manages are released by
  calling the C library function 'munmap'.

  struct mem_map_node_t
  ---------------------
  Helper class that belongs to class 'mem_map_t' that holds data defining the
  regions of memory managed by 'mem_map_t'.

  struct mem_buf_t
  ----------------
  A class incarnating the 'mem_mgr_t' interface that *manages* a set of regions
  of memory that are obtained from the free store via the functions 'malloc' or
  'realloc'. The lifetime of each managed memory region extends precisely until
  that of 'mem_buf_t's instance itself. At the end of lifetime of an instance
  of 'mem_buf_t' all memory regions that the instance manages are released by
  calling the C library function 'free'.

  struct mem_buf_node_t
  ---------------------
  Helper class that belongs to class 'mem_buf_t' that holds data defining the
  regions of memory managed by 'mem_buf_t'.

By design, Word-Count makes as few memory-related operations as possible. For
example, the number of such operations needed for loading in a dictionary from
an input file stream is minimized: see method 'dict_load', where there's only
one hash table operation ('lhash_insert') and at most one call to 'memcpy' (in
'file_buf_get_line') per each input dictionary word, when the 'dict_t' instance
is using buffered I/O. When the 'dict_t' instance is told to use memory-mapped
I/O, there's no 'memcpy', nor is any memory-write operation implied by loading
in the input dictionary file.


4. GCC's Integer Arithmetic Overflow Builtins
=============================================

This section illustrates a very nice feature of GCC's code optimizer that was
mentioned above, in the section describing Word-Count's configuration parameter
'CONFIG_USE_OVERFLOW_BUILTINS'.

Firstly, two helper shell functions:

  $ gcc-asm() {
    gcc -Wall -Wextra -DDEBUG -xc - -S -o - "$@"|
    sed -nr '/\.cfi_startproc/,/\.cfi_endproc/p'
  }

  # uint-overflow [add|sub|mul|inc|dec]
  $ uint-overflow() {
    local n="${1:-add}"
    local u=''
    local o
    case "$n" in
      add) o='+';;
      sub) o='-';;
      mul) o='*';;
      inc) o='++'; u='u';;
      dec) o='--'; u='u';;
      *) echo >&2 "unknown op name '$n'"; return 1;;
    esac
    local N="$(tr '[:lower:]' '[:upper:]' <<< "$n")"
    echo -e '#include <stdlib.h>\n#include <stdarg.h>\n#include <stdio.h>\n'
    sed -nr '\|^//\s+>>>\s+WORD_COUNT_COMMON\s*$|,\|^//\s+<<<\s+WORD_COUNT_COMMON\s*$|p' word-count.c
    [ -z "$u" ] &&
    echo -e '\nsize_t f(size_t a, size_t b)\n{\n\tASSERT_UINT_'"$N"'_NO_OVERFLOW(a, b);\n\treturn a '"$o"' b;\n}' ||
    echo -e '\nsize_t f(size_t a)\n{\n\tASSERT_UINT_'"$N"'_NO_OVERFLOW(a);\n\treturn '"$o"' a;\n}'
  }

The shell function 'uint-overflow' produces C code for to be able to compile
simple integer addition, subtraction and multiplication operations using the
overflow checking code that 'word-count.c' defines (the code shown below was
shortened, replacing with ellipsis marks the source code of 'word-count.c'):

  # meta-command:
  $ for n in add sub mul inc dec; do
      c="uint-overflow $n"
      echo "$ $c"
      eval "$c"
    done

  $ uint-overflow add
  #include <stdlib.h>
  #include <stdarg.h>
  #include <stdio.h>
  ...
  size_t f(size_t a, size_t b)
  {
      ASSERT_UINT_ADD_NO_OVERFLOW(a, b);
      return a + b;
  }

  $ uint-overflow sub
  #include <stdlib.h>
  #include <stdarg.h>
  #include <stdio.h>
  ...
  size_t f(size_t a, size_t b)
  {
      ASSERT_UINT_SUB_NO_OVERFLOW(a, b);
      return a - b;
  }

  $ uint-overflow mul
  #include <stdlib.h>
  #include <stdarg.h>
  #include <stdio.h>
  ...
  size_t f(size_t a, size_t b)
  {
      ASSERT_UINT_MUL_NO_OVERFLOW(a, b);
      return a * b;
  }

  $ uint-overflow inc
  #include <stdlib.h>
  #include <stdarg.h>
  #include <stdio.h>
  ...
  size_t f(size_t a)
  {
      ASSERT_UINT_INC_NO_OVERFLOW(a);
      return ++ a;
  }

  $ uint-overflow dec
  #include <stdlib.h>
  #include <stdarg.h>
  #include <stdio.h>
  ...
  size_t f(size_t a)
  {
      ASSERT_UINT_DEC_NO_OVERFLOW(a);
      return -- a;
  }

Now, let see the code generated on an x86-64 platform for the above three kinds
of functions 'f', when the functions do not make use of GCC's integer overflow
checking builtins.

  # meta-command:
  $ for n in add sub mul inc dec; do
      c="uint-overflow $n|gcc-asm -O3"
      echo "$ $c"
      eval "$c"
    done

  $ uint-overflow add|gcc-asm -O3
          .cfi_startproc
          movq    %rsi, %rax
          notq    %rax
          cmpq    %rdi, %rax
          jb      .L7
          leaq    (%rsi,%rdi), %rax
          ret
          .p2align 4,,10
          .p2align 3
  .L7:
          subq    $8, %rsp
          .cfi_def_cfa_offset 16
          movl    $.LC0, %ecx
          movl    $__func__.0, %edx
          movl    $384, %esi
          movl    $.LC1, %edi
          call    assert_failed
          .cfi_endproc

  $ uint-overflow sub|gcc-asm -O3
          .cfi_startproc
          cmpq    %rsi, %rdi
          jb      .L7
          movq    %rdi, %rax
          subq    %rsi, %rax
          ret
          .p2align 4,,10
          .p2align 3
  .L7:
          subq    $8, %rsp
          .cfi_def_cfa_offset 16
          movl    $.LC0, %ecx
          movl    $__func__.0, %edx
          movl    $384, %esi
          movl    $.LC1, %edi
          call    assert_failed
          .cfi_endproc

  $ uint-overflow mul|gcc-asm -O3
          .cfi_startproc
          testq   %rsi, %rsi
          je      .L2
          movq    %rdi, %rax
          mulq    %rsi
          jo      .L13
  .L2:
          movq    %rsi, %rax
          imulq   %rdi, %rax
          ret
  .L13:
          pushq   %rax
          .cfi_def_cfa_offset 16
          movl    $.LC0, %ecx
          movl    $__func__.0, %edx
          movl    $384, %esi
          movl    $.LC1, %edi
          call    assert_failed
          .cfi_endproc

  $ uint-overflow inc|gcc-asm -O3
          .cfi_startproc
          cmpq    $-1, %rdi
          je      .L7
          leaq    1(%rdi), %rax
          ret
          .p2align 4,,10
          .p2align 3
  .L7:
          subq    $8, %rsp
          .cfi_def_cfa_offset 16
          movl    $.LC0, %ecx
          movl    $__func__.0, %edx
          movl    $401, %esi
          movl    $.LC1, %edi
          call    assert_failed
          .cfi_endproc

  $ uint-overflow dec|gcc-asm -O3
          .cfi_startproc
          testq   %rdi, %rdi
          je      .L7
          leaq    -1(%rdi), %rax
          ret
          .p2align 4,,10
          .p2align 3
  .L7:
          subq    $8, %rsp
          .cfi_def_cfa_offset 16
          movl    $.LC0, %ecx
          movl    $__func__.0, %edx
          movl    $401, %esi
          movl    $.LC1, %edi
          call    assert_failed
          .cfi_endproc

When the 'f' functions do make use of GCC's integer overflow checking builtins,
then the code generated gets simplified to only executing the respective integer
arithmetic operation and a corresponding jump instruction handling the case of
an actual overflow (except for subtraction operations on x86-64 platforms):

  # meta-command:
  $ for n in add sub mul inc dec; do
      c="uint-overflow $n|gcc-asm -O3 -DCONFIG_USE_OVERFLOW_BUILTINS"
      echo "$ $c"
      eval "$c"
    done

  $ uint-overflow add|gcc-asm -O3 -DCONFIG_USE_OVERFLOW_BUILTINS
          .cfi_startproc
          movq    %rdi, %rax
          addq    %rsi, %rax
          jc      .L10
          ret
  .L10:
          pushq   %rax
          .cfi_def_cfa_offset 16
          movl    $.LC0, %ecx
          movl    $__func__.0, %edx
          movl    $384, %esi
          movl    $.LC1, %edi
          call    assert_failed
          .cfi_endproc

  $ uint-overflow sub|gcc-asm -O3 -DCONFIG_USE_OVERFLOW_BUILTINS
          .cfi_startproc
          movq    %rdi, %rax
          cmpq    %rsi, %rdi
          jb      .L10
          subq    %rsi, %rax
          ret
  .L10:
          pushq   %rax
          .cfi_def_cfa_offset 16
          movl    $.LC0, %ecx
          movl    $__func__.0, %edx
          movl    $384, %esi
          movl    $.LC1, %edi
          call    assert_failed
          .cfi_endproc

  $ uint-overflow mul|gcc-asm -O3 -DCONFIG_USE_OVERFLOW_BUILTINS
          .cfi_startproc
          movq    %rdi, %rax
          mulq    %rsi
          jo      .L10
          ret
  .L10:
          pushq   %rax
          .cfi_def_cfa_offset 16
          movl    $.LC0, %ecx
          movl    $__func__.0, %edx
          movl    $384, %esi
          movl    $.LC1, %edi
          call    assert_failed
          .cfi_endproc

  $ uint-overflow inc|gcc-asm -O3 -DCONFIG_USE_OVERFLOW_BUILTINS
          .cfi_startproc
          movq    %rdi, %rax
          addq    $1, %rax
          jc      .L10
          ret
  .L10:
          pushq   %rax
          .cfi_def_cfa_offset 16
          movl    $.LC0, %ecx
          movl    $__func__.0, %edx
          movl    $401, %esi
          movl    $.LC1, %edi
          call    assert_failed
          .cfi_endproc

  $ uint-overflow dec|gcc-asm -O3 -DCONFIG_USE_OVERFLOW_BUILTINS
          .cfi_startproc
          cmpq    $1, %rdi
          jb      .L10
          leaq    -1(%rdi), %rax
          ret
  .L10:
          pushq   %rax
          .cfi_def_cfa_offset 16
          movl    $.LC0, %ecx
          movl    $__func__.0, %edx
          movl    $401, %esi
          movl    $.LC1, %edi
          call    assert_failed
          .cfi_endproc

Above is to be seen that on x86-64 platforms, GCC uses the carry flag (CF) and
the overflow flag (OF) -- by means of the instructions 'jc' and, respectively,
'jo' -- to check whether the previously executed integer arithmetic operation
-- addition or multiplication -- caused overflow or not.

Strangely enough, for the case of integer substraction operations, none of GCC
(up to the latest 11.2) generate the simpler code:

          .cfi_startproc
          movq    %rdi, %rax
          subq    %rsi, %rax
          jb      .L10
          ret
  .L10:
          ...
          call    assert_failed
          .cfi_endproc

In the case of decrement operations too, none of GCC (up to the latest 11.2)
generate the simpler code:

          .cfi_startproc
          movq    %rdi, %rax
          subq    $1, %rax
          jb      .L10
          ret
  .L10:
          ...
          call    assert_failed
          .cfi_endproc


5. References
=============

Books:

[1] Donald E. Knuth
    The Art of Computer Programming,
    Vol. 3, Sorting and Searching, 2nd ed.
    Addison Wesley Longman, 1998, 780 pages
    ISBN 978-0-201-89685-0

    Chapter 6.4: Hashing, pp. 525-528

Free Software:

[2] Path-Set: Dictionary Data Structures for Path Name Strings
    https://www.nongnu.org/path-set/

[3] Json-Type: JSON Push Parsing and Type Checking
    https://www.nongnu.org/json-type/

Internet Resources:

[4] Wikipedia: Associative Array
    https://en.wikipedia.org/wiki/Associative_array

[5] YouTube: CppCon 2017
    Matt Kulukundis: Designing a Fast, Efficient,
    Cache-friendly Hash Table, Step by Step
    https://www.youtube.com/watch?v=ncHmEUmJZf4

    YouTube: CppCon 2019
    Matt Kulukundis: Abseil's Open Source Hashtables: 2 Years In
    https://www.youtube.com/watch?v=JZE3_0qvrMg

[6] Intel® 64 and IA-32 Architectures Software Developer’s Manual
    https://www.intel.com/content/dam/www/public/us/en/documents/manuals/
    64-ia-32-architectures-software-developer-vol-1-manual.pdf

    Volume 1: Basic Architecture
    3.3.7.1 Canonical Addressing

    In 64-bit mode, an address is considered to be in canonical
    form if address bits 63 through to the most-significant
    implemented bit by the microarchitecture are set to either
    all ones or all zeros.

    Intel 64 architecture defines a 64-bit linear address.
    Implementations can support less. The first implementation
    of IA-32 processors with Intel 64 architecture supports a
    48-bit linear address. This means a canonical address must
    have bits 63 through 48 set to zeros or ones (depending on
    whether bit 47 is a zero or one).

[7] GCC's Docs: 6.52 Built-in Functions to Perform Arithmetic with Overflow Checking
    https://gcc.gnu.org/onlinedocs/gcc-5.1.0/gcc/Integer-Overflow-Builtins.html

[8] FNV Hash, by Landon Curt Noll
    http://www.isthe.com/chongo/tech/comp/fnv/index.html

[9] MurmurHash Family of Hash Functions, by Austin Appleby
    https://github.com/aappleby/smhasher

[10] Perf: Linux Profiling With Performance Counters
     https://perf.wiki.kernel.org/

[11] GNU Binutils: GProf
     https://www.gnu.org/software/binutils/
     https://sourceware.org/binutils/docs/gprof.html


